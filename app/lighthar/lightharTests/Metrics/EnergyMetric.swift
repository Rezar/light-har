/**
 * Gaston Longhitano <gastonl@bu.edu> @ Boston University - Research
 *
 * This source code is licensed under the terms found in the
 * LICENSE file in the root directory of this source tree.
 */

import XCTest

class EnergyMetric: NSObject, XCTMetric {
    var startTimes = AtomicArray<UInt64>()
    var endTimes = AtomicArray<UInt64>()
    
    
    // This will get called on background queue i.e. any random thread for each iteration.
    func willBeginMeasuring() {
        startTimes.append(DispatchTime.now().uptimeNanoseconds)
    }

    // This will get called on background queue i.e. any random thread for each iteration.
    func didStopMeasuring() {
        endTimes.append(DispatchTime.now().uptimeNanoseconds)
    }
    
    func copy(with zone: NSZone? = nil) -> Any {
        return self
    }

    // Report the battery level difference as the metric
    func reportMeasurements(from startTime: XCTPerformanceMeasurementTimestamp, to endTime: XCTPerformanceMeasurementTimestamp) throws -> [XCTPerformanceMeasurement] {
        let startTimeNano = startTime.absoluteTimeNanoSeconds
        let endTimeNano = endTime.absoluteTimeNanoSeconds
        
        let timeDiffNS: UInt64
        if endTimeNano > startTimeNano {
            timeDiffNS = endTimeNano - startTimeNano
        } else if let startTimeNS = startTimes.first, let endTimeNS = endTimes.first, endTimeNS > startTimeNS {
            timeDiffNS = endTimeNS - startTimeNS
        } else {
            timeDiffNS = .min // or throw exception here.
        }
        startTimes.removeFirst()
        endTimes.removeFirst()
        
        let cpuTimeInSeconds = Double(timeDiffNS) / 1_000_000_000.00
        let energySpent = estimateEnergyConsumption(cpuTimeInSeconds: Double(cpuTimeInSeconds))
        let measurement = Measurement(value: Double(energySpent), unit: Unit(symbol: "mAh"))
        
        return [XCTPerformanceMeasurement(identifier: "bu.research.lighthar.energyMetric", displayName: "Energy", value: measurement)]
    }
   

    /**
     * Calculates the energy consumption in milliamp-hours (mAh) of a process running on an A14 CPU, based on the CPU time in seconds.
     *
     * Important considerations:
     * - TDP (Thermal Design Power) Usage: TDP refers to the maximum amount of heat generated by a computer chip or component that the cooling system is designed to dissipate under any workload. Here we assume the high workload, then we use the maximum value.
     * - Voltage (V) Usage a nominal voltage value of 3.7V, which is the The nominal voltage of the iPhone 12 Pro lithium-ion battery, to calculate the energy in mAh. This approach assumes a constant discharge rate at this nominal voltage.
     *
     * Sources:
     *  - https://www.intel.com/content/www/us/en/support/articles/000055611/processors.html
     *  - https://www.cgdirector.com/cpu-tdp-thermal-design-power-explained/
     */
    private func estimateEnergyConsumption(cpuTimeInSeconds: Double) -> Double {
        let P = 7.25 // The TDP of the A14 CPU in watts, as specified by the manufacturer (https://www.cpu-monkey.com/en/cpu-apple_a14_bionic)
        let t = cpuTimeInSeconds
        let V = 3.7 // The nominal voltage of the iPhone 12 Pro battery, which is typically around 3.7V to 3.85V for lithium-ion batteries
        let E = P * t
        let E_Wh = E / 3600 //Convert E from Joules (1 watt-hour = 3600 joules) to Watts-hour
        let mAh = (E_Wh / V) * 1000
        
        return mAh
    }
    
}
